$date
	Wed Oct 02 18:56:21 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module aluN_tb $end
$var wire 8 ! f [7:0] $end
$var reg 2 " ALUControl [1:0] $end
$var reg 8 # a [7:0] $end
$var reg 8 $ b [7:0] $end
$scope module alu1 $end
$var wire 2 % ALUControl [1:0] $end
$var wire 8 & SrcA [7:0] $end
$var wire 8 ' SrcB [7:0] $end
$var wire 8 ( y_or [7:0] $end
$var wire 8 ) y_and [7:0] $end
$var wire 8 * sum [7:0] $end
$var wire 8 + sub [7:0] $end
$var wire 1 , cout $end
$var wire 8 - ALUResult [7:0] $end
$var parameter 32 . N $end
$scope module add1 $end
$var wire 8 / a [7:0] $end
$var wire 8 0 b [7:0] $end
$var wire 8 1 f [7:0] $end
$var wire 1 , cout $end
$var wire 9 2 carry [8:0] $end
$var parameter 32 3 N $end
$scope begin genblk1[0] $end
$var parameter 2 4 i $end
$scope module s $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 7 cin $end
$var wire 1 8 cout $end
$var wire 1 9 s1 $end
$var wire 1 : s $end
$var wire 1 ; cout2 $end
$var wire 1 < cout1 $end
$scope module h1 $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 < c $end
$var wire 1 9 s $end
$upscope $end
$scope module h2 $end
$var wire 1 9 a $end
$var wire 1 7 b $end
$var wire 1 ; c $end
$var wire 1 : s $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 = i $end
$scope module s $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 @ cin $end
$var wire 1 A cout $end
$var wire 1 B s1 $end
$var wire 1 C s $end
$var wire 1 D cout2 $end
$var wire 1 E cout1 $end
$scope module h1 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 E c $end
$var wire 1 B s $end
$upscope $end
$scope module h2 $end
$var wire 1 B a $end
$var wire 1 @ b $end
$var wire 1 D c $end
$var wire 1 C s $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 F i $end
$scope module s $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 I cin $end
$var wire 1 J cout $end
$var wire 1 K s1 $end
$var wire 1 L s $end
$var wire 1 M cout2 $end
$var wire 1 N cout1 $end
$scope module h1 $end
$var wire 1 G a $end
$var wire 1 H b $end
$var wire 1 N c $end
$var wire 1 K s $end
$upscope $end
$scope module h2 $end
$var wire 1 K a $end
$var wire 1 I b $end
$var wire 1 M c $end
$var wire 1 L s $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 O i $end
$scope module s $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 R cin $end
$var wire 1 S cout $end
$var wire 1 T s1 $end
$var wire 1 U s $end
$var wire 1 V cout2 $end
$var wire 1 W cout1 $end
$scope module h1 $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 W c $end
$var wire 1 T s $end
$upscope $end
$scope module h2 $end
$var wire 1 T a $end
$var wire 1 R b $end
$var wire 1 V c $end
$var wire 1 U s $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 X i $end
$scope module s $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 [ cin $end
$var wire 1 \ cout $end
$var wire 1 ] s1 $end
$var wire 1 ^ s $end
$var wire 1 _ cout2 $end
$var wire 1 ` cout1 $end
$scope module h1 $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 ` c $end
$var wire 1 ] s $end
$upscope $end
$scope module h2 $end
$var wire 1 ] a $end
$var wire 1 [ b $end
$var wire 1 _ c $end
$var wire 1 ^ s $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 a i $end
$scope module s $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 d cin $end
$var wire 1 e cout $end
$var wire 1 f s1 $end
$var wire 1 g s $end
$var wire 1 h cout2 $end
$var wire 1 i cout1 $end
$scope module h1 $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 i c $end
$var wire 1 f s $end
$upscope $end
$scope module h2 $end
$var wire 1 f a $end
$var wire 1 d b $end
$var wire 1 h c $end
$var wire 1 g s $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 j i $end
$scope module s $end
$var wire 1 k a $end
$var wire 1 l b $end
$var wire 1 m cin $end
$var wire 1 n cout $end
$var wire 1 o s1 $end
$var wire 1 p s $end
$var wire 1 q cout2 $end
$var wire 1 r cout1 $end
$scope module h1 $end
$var wire 1 k a $end
$var wire 1 l b $end
$var wire 1 r c $end
$var wire 1 o s $end
$upscope $end
$scope module h2 $end
$var wire 1 o a $end
$var wire 1 m b $end
$var wire 1 q c $end
$var wire 1 p s $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 s i $end
$scope module s $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 v cin $end
$var wire 1 w cout $end
$var wire 1 x s1 $end
$var wire 1 y s $end
$var wire 1 z cout2 $end
$var wire 1 { cout1 $end
$scope module h1 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 { c $end
$var wire 1 x s $end
$upscope $end
$scope module h2 $end
$var wire 1 x a $end
$var wire 1 v b $end
$var wire 1 z c $end
$var wire 1 y s $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module and1 $end
$var wire 8 | a [7:0] $end
$var wire 8 } b [7:0] $end
$var wire 8 ~ f [7:0] $end
$var parameter 32 !" N $end
$upscope $end
$scope module mux8_1 $end
$var wire 8 "" d0 [7:0] $end
$var wire 8 #" d2 [7:0] $end
$var wire 2 $" s [1:0] $end
$var wire 8 %" y [7:0] $end
$var wire 8 &" d3 [7:0] $end
$var wire 8 '" d1 [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 (" a [7:0] $end
$var wire 8 )" b [7:0] $end
$var wire 8 *" f [7:0] $end
$var parameter 32 +" N $end
$upscope $end
$scope module sub1 $end
$var wire 8 ," a [7:0] $end
$var wire 8 -" b [7:0] $end
$var wire 8 ." y [7:0] $end
$var parameter 32 /" N $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 /"
b1000 +"
b1000 !"
b111 s
b110 j
b101 a
b100 X
b11 O
b10 F
b1 =
b0 4
b1000 3
b1000 .
$end
#0
$dumpvars
b0 ."
b1100 -"
b1100 ,"
b1100 *"
b1100 )"
b1100 ("
b0 '"
b1100 &"
b11000 %"
b0 $"
b1100 #"
b11000 ""
b1100 ~
b1100 }
b1100 |
0{
0z
0y
0x
0w
0v
0u
0t
0r
0q
0p
0o
0n
0m
0l
0k
0i
0h
0g
0f
0e
0d
0c
0b
0`
0_
1^
0]
0\
1[
0Z
0Y
1W
0V
1U
0T
1S
1R
1Q
1P
1N
0M
0L
0K
1J
0I
1H
1G
0E
0D
0C
0B
0A
0@
0?
0>
0<
0;
0:
09
08
07
06
05
b11000 2
b11000 1
b1100 0
b1100 /
b11000 -
0,
b0 +
b11000 *
b1100 )
b1100 (
b1100 '
b1100 &
b0 %
b1100 $
b1100 #
b0 "
b11000 !
$end
#5
0^
0R
0[
1:
1L
0J
b1101 *
b1101 1
b1101 ""
1U
0V
b0 2
0S
b1011 !
b1011 -
b1011 %"
19
1K
0N
1T
0W
16
0H
0Q
b0 )
b0 ~
b0 #"
b1101 (
b1101 &"
b1101 *"
b1011 +
b1011 '"
b1011 ."
b1 $
b1 '
b1 0
b1 }
b1 )"
b1 -"
b1 "
b1 %
b1 $"
#10
1^
1R
1[
0L
1J
1U
b11000 2
1S
b111001 *
b111001 1
b111001 ""
1g
0K
1N
0T
1W
1f
b1100 !
b1100 -
b1100 %"
1H
1Q
1c
b1100 )
b1100 ~
b1100 #"
b101101 (
b101101 &"
b101101 *"
b11011111 +
b11011111 '"
b11011111 ."
b101101 $
b101101 '
b101101 0
b101101 }
b101101 )"
b101101 -"
b10 "
b10 %
b10 $"
#15
0:
0g
b1011000 *
b1011000 1
b1011000 ""
1p
b1001100 !
b1001100 -
b1001100 %"
09
0f
1o
06
0c
1k
b1001100 (
b1001100 &"
b1001100 *"
b1100 $
b1100 '
b1100 0
b1100 }
b1100 )"
b1100 -"
b1000000 +
b1000000 '"
b1000000 ."
b1001100 #
b1001100 &
b1001100 /
b1001100 |
b1001100 ("
b1001100 ,"
b11 "
b11 %
b11 $"
#25
